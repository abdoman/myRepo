What happens when you initialize a repository? Why do you need to do it?

.git files are added to keep track of the metadata (history and changes as you go about
your development)

How is the staging area different from the working directory and the repository? What value do you think it offers?

staging area is the intermediate place before a commit is applied. it offers option to select the files to be commited
under a commit message that makes sense!

How can you use the staging area to make sure you have one commit per logical change?

before committting, run [git diff --staged] to see whats the changes ready for commit
 [compares staged area to latest commit] this way you know what'youre about to commit

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

when you're experimenting with your code, branches can be treated as a copy of your project 
unti you want to merge or discard it!

How do the diagrams help you visualize the branch structure?

they can help visualize unreachable commits, since each commit can reference the father.
the detached head warning is concerned by this!

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

new head that contains the code from both. one branch merges into the other, master is the new head, and 
delete the old branch name [git branch -d coins], still, all the old commits are still there!

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

you're incontrol, no way to manage complex situations manually!